import React, { useState, useEffect } from "react";
import { Button, SafeAreaView, StyleSheet, View, Text, StatusBar } from "react-native";
import { Colors } from "react-native/Libraries/NewAppScreen";
import { mediaDevices, RTCView } from "react-native-webrtc";
import io from "socket.io-client";

const App = () => {
  const [stream, setStream] = useState(null);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    // Initialize WebSocket connection to your backend
    const socket = io("ws://192.168.1.194:10050");
    setSocket(socket);

    // Cleanup the socket connection on unmount
    return () => {
      socket.disconnect();
    };
  }, []);

  const start = async () => {
    console.log("start");
    if (!stream) {
      let s;
      try {
        s = await mediaDevices.getUserMedia({
          video: true,
          audio: true,
        });
        setStream(s);

        // Send the camera stream to the backend over WebSocket
        if (socket) {
          socket.emit("start_stream"); // Signal to the backend that you're starting the stream
          // socket.emit('Video_frame',{data:s.toURL()})
          s.getTracks().forEach((track) => {
            socket.emit("video_frame", { data: track });
          });
        }
      } catch (e) {
        console.error(e);
      }
    }
  };

  const stop = () => {
    console.log("stop");
    if (stream) {
      // Stop and release the camera stream
      stream.release();
      setStream(null);

      // Signal to the backend that you're stopping the stream
      if (socket) {
        socket.emit("stop_stream");
      }
    }
  };

  return (
    <>
      <StatusBar barStyle="dark-content" />
      <SafeAreaView style={styles.body}>
        {stream && <RTCView streamURL={stream.toURL()} style={styles.stream} />}
        <View style={styles.footer}>
          <Button title="Start" onPress={start} />
          <Button title="Stop" onPress={stop} />
        </View>
      </SafeAreaView>
    </>
  );
};

const styles = StyleSheet.create({
  body: {
    backgroundColor: Colors.white,
    ...StyleSheet.absoluteFill,
  },
  stream: {
    flex: 1,
  },
  footer: {
    backgroundColor: Colors.lighter,
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
  },
});

export default App;
