import React, { useState } from 'react';
import CheckBox from '@react-native-community/checkbox';
import {Picker} from '@react-native-picker/picker';
import {
  View,
  Text,
  Button,
  ScrollView,
} from 'react-native';

function App() {
  const [useDataChannel, setUseDataChannel] = useState(true);
  const [dataChannelParameters, setDataChannelParameters] = useState('{"ordered": true}');
  const [useAudio, setUseAudio] = useState(true);
  const [audioCodec, setAudioCodec] = useState('default');
  const [useVideo, setUseVideo] = useState(false);
  const [videoResolution, setVideoResolution] = useState('');
  const [videoTransform, setVideoTransform] = useState('none');
  const [videoCodec, setVideoCodec] = useState('default');
  const [useStun, setUseStun] = useState(false);
  const [mediaVisible, setMediaVisible] = useState(false);
  const [iceGatheringState, setIceGatheringState] = useState('');
  const [iceConnectionState, setIceConnectionState] = useState('');
  const [signalingState, setSignalingState] = useState('');
  const [dataChannelText, setDataChannelText] = useState('');
  const [offerSdp, setOfferSdp] = useState('');
  const [answerSdp, setAnswerSdp] = useState('');

  const start = () => {
    // Implement your start function logic here
  };

  const stop = () => {
    // Implement your stop function logic here
  };

  return (
    <ScrollView>
      <Text>Options</Text>
      <View>
        <CheckBox
          value={useDataChannel}
          onValueChange={(value) => setUseDataChannel(value)}
        />
        <Text>Use datachannel</Text>
        <Picker
          selectedValue={dataChannelParameters}
          onValueChange={(itemValue) => setDataChannelParameters(itemValue)}
        >
          <Picker.Item label="Ordered, reliable" value='{"ordered": true}' />
          <Picker.Item
            label="Unordered, no retransmissions"
            value='{"ordered": false, "maxRetransmits": 0}'
          />
          <Picker.Item
            label="Unordered, 500ms lifetime"
            value='{"ordered": false, "maxPacketLifetime": 500}'
          />
        </Picker>
      </View>
      <View>
        <CheckBox
          value={useAudio}
          onValueChange={(value) => setUseAudio(value)}
        />
        <Text>Use audio</Text>
        <Picker
          selectedValue={audioCodec}
          onValueChange={(itemValue) => setAudioCodec(itemValue)}
        >
          <Picker.Item label="Default codecs" value="default" />
          <Picker.Item label="Opus" value="opus/48000/2" />
          <Picker.Item label="PCMU" value="PCMU/8000" />
          <Picker.Item label="PCMA" value="PCMA/8000" />
        </Picker>
      </View>
      <View>
        <CheckBox
          value={useVideo}
          onValueChange={(value) => setUseVideo(value)}
        />
        <Text>Use video</Text>
        <Picker
          selectedValue={videoResolution}
          onValueChange={(itemValue) => setVideoResolution(itemValue)}
        >
          <Picker.Item label="Default resolution" value="" />
          <Picker.Item label="320x240" value="320x240" />
          <Picker.Item label="640x480" value="640x480" />
          <Picker.Item label="960x540" value="960x540" />
          <Picker.Item label="1280x720" value="1280x720" />
        </Picker>
        <Picker
          selectedValue={videoTransform}
          onValueChange={(itemValue) => setVideoTransform(itemValue)}
        >
          <Picker.Item label="No transform" value="none" />
          <Picker.Item label="Edge detection" value="edges" />
          <Picker.Item label="Cartoon effect" value="cartoon" />
          <Picker.Item label="Rotate" value="rotate" />
        </Picker>
        <Picker
          selectedValue={videoCodec}
          onValueChange={(itemValue) => setVideoCodec(itemValue)}
        >
          <Picker.Item label="Default codecs" value="default" />
          <Picker.Item label="VP8" value="VP8/90000" />
          <Picker.Item label="H264" value="H264/90000" />
        </Picker>
      </View>
      <View>
        <CheckBox
          value={useStun}
          onValueChange={(value) => setUseStun(value)}
        />
        <Text>Use STUN server</Text>
      </View>
      <Button title="Start" onPress={start} />
      <Button
        title="Stop"
        style={{ display: mediaVisible ? 'flex' : 'none' }}
        onPress={stop}
      />
      <Text>State</Text>
      <Text>ICE gathering state: {iceGatheringState}</Text>
      <Text>ICE connection state: {iceConnectionState}</Text>
      <Text>Signaling state: {signalingState}</Text>
      <View style={{ display: mediaVisible ? 'flex' : 'none' }}>
        <Text>Media</Text>
        {/*<Audio source={{}} autoPlay />*/}
        {/*<Video*/}
        {/*  source={{}}*/}
        {/*  autoPlay*/}
        {/*  muted*/}
        {/*  resizeMode="contain"*/}
        {/*/>*/}
      </View>
      <Text>Data channel</Text>
      <Text>Data channel content:</Text>
      <Text>{dataChannelText}</Text>
      <Text>SDP</Text>
      <Text>Offer:</Text>
      <Text>{offerSdp}</Text>
      <Text>Answer:</Text>
      <Text>{answerSdp}</Text>
    </ScrollView>
  );
}

export default App;
