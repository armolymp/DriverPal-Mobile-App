import React, { useEffect, useState } from "react";
import {
  Button,
  SafeAreaView,
  StyleSheet,
  View,
  Text,
  StatusBar,
  PermissionsAndroid,
  Platform,
} from "react-native";
import { Colors } from "react-native/Libraries/NewAppScreen";
import { mediaDevices, RTCView, RTCPeerConnection, RTCSessionDescription } from "react-native-webrtc";

function DriverAssistant() {
  const [stream, setStream] = useState(null);
  const [peerConnection, setPeerConnection] = useState(null);
  const [webSocket, setWebSocket] = useState(null);

  useEffect(() => {
    const requestCameraPermission = async () => {
      try {
        if (Platform.OS === "android") {
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.CAMERA,
          );
          if (granted === PermissionsAndroid.RESULTS.GRANTED) {
            console.warn("Camera permitted");
          } else {
            console.warn("Camera permission denied");
          }
        } else {
          console.warn("Camera permitted");
        }
      } catch (err) {
        console.warn(err);
      }
    };

    requestCameraPermission();
  }, []);

  useEffect(() => {
    connectWebSocket();
  }, []);

  const start = async () => {
    console.log("start");
    if (!stream) {
      let s;
      try {
        s = await mediaDevices.getUserMedia({ video: true });
        setStream(s);

        // Create and configure a peer connection
        const pc = new RTCPeerConnection({});
        setPeerConnection(pc);

        s.getTracks().forEach((track) => {
          pc.addTrack(track, s);
        });

        pc.createOffer()
          .then((offer) => pc.setLocalDescription(offer))
          .then(() => {
            webSocket.send(JSON.stringify({ type: "offer", sdp: pc.localDescription }));
          });
      } catch (e) {
        console.error("error: " + e);
      }
    }
  };

  const stop = () => {
    console.log("stop");
    if (stream) {
      stream.release();
      setStream(null);
      if (peerConnection) {
        peerConnection.close();
        setPeerConnection(null);
      }
      if (webSocket) {
        webSocket.close();
        setWebSocket(null);
      }
    }
  };

  const connectWebSocket = () => {
    const ws = new WebSocket("ws://192.168.1.194:10050"); // Replace with your server's IP and port
    ws.onopen = () => {
      console.log("WebSocket connected");
      setWebSocket(ws);
    };
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === "answer") {
        // Set remote description with the received answer
        peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
      }
    };
    ws.onclose = () => {
      console.log("WebSocket closed");
    };
  };

  return (
    <>
      <StatusBar barStyle="dark-content" />
      <SafeAreaView style={styles.body}>
        {stream && (
          <RTCView streamURL={stream.toURL()} style={styles.stream} />
        )}
        <View style={styles.footer}>
          <Button title="Start" onPress={start} />
          <Button title="Stop" onPress={stop} />
        </View>
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  body: {
    backgroundColor: Colors.white,
    ...StyleSheet.absoluteFill,
  },
  stream: {
    flex: 1,
  },
  footer: {
    backgroundColor: Colors.lighter,
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
  },
});

export default DriverAssistant;
